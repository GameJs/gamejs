// Generated by CoffeeScript 1.4.0

/**
 * @fileoverview Utilies for URI handling.
 *
*/


(function() {
  var URI_REGEX, makeRelative, match, removeDotSegments, resolve;

  URI_REGEX = new RegExp('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');

  /**
   * Resolve path against URI.
   *
   * @param {String} uri
   * @param {String} path to resolve
  */


  resolve = exports.resolve = function(uri, path) {
    var absolutePath, host, lastSlashIndex, m, n;
    m = match(uri);
    n = match(path);
    host = m[1] + '://' + m[3];
    if (n[1]) {
      return path;
    }
    if (m[4]) {
      host = host + ":" + m[4];
    }
    absolutePath = m[5];
    if (path.charAt(0) !== '/') {
      lastSlashIndex = absolutePath.lastIndexOf('/');
      absolutePath = absolutePath.substr(0, lastSlashIndex + 1) + path;
    } else {
      absolutePath = path;
    }
    return host + removeDotSegments(absolutePath);
  };

  /**
   * Try to match an URI against a regex returning the following
   * capture groups:
   *     $1 = http              scheme
   *     $2 = <undefined>       userInfo -\
   *     $3 = www.ics.uci.edu   domain     | authority
   *     $4 = <undefined>       port     -/
   *     $5 = /pub/ietf/uri/    path
   *     $6 = <undefined>       query without ?
   *     $7 = Related           fragment without #
   *
   * @param {String} uri
  */


  match = exports.match = function(uri) {
    return uri.match(URI_REGEX);
  };

  /**
   * Make an absolute URI relative to document.location.href
   * @param {String} uri
   * @returns The relative URI or the unchanged URI if it's not
   * possible to make it relative to the path of document.location.href.
  */


  makeRelative = exports.makeRelative = function(uri) {
    var docLocPath;
    docLocPath = resolve(document.location.href, './');
    if (uri.indexOf(docLocPath) === 0) {
      uri = './' + uri.substring(docLocPath.length);
    }
    return uri;
  };

  /**
   * Removes dot segments in given path component
  */


  removeDotSegments = function(path) {
    var leadingSlash, out, pos, segment, segments, _i, _ref;
    if (path === '..' || path === '.') {
      return '';
    }
    leadingSlash = path.indexOf('/') > -1;
    segments = path.split('/');
    out = [''];
    for (pos = _i = 1, _ref = segments.length; 1 <= _ref ? _i <= _ref : _i >= _ref; pos = 1 <= _ref ? ++_i : --_i) {
      segment = segments[pos];
      if (segment === void 0 || segment === '.') {
        continue;
      }
      if (segment === '..') {
        if (out.length > 1 || out.length === 1 && out[0] !== '') {
          out.pop();
        }
        if (leadingSlash && pos === segments.length) {
          out.push('');
        }
      } else {
        out.push(segment);
        leadingSlash = true;
      }
    }
    return out.join('/');
  };

}).call(this);
