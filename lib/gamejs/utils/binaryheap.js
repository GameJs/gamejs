// Generated by CoffeeScript 1.4.0

/*
 * Binary Heap
 *
 * @see http:#eloquentjavascript.net/appendix2.html
*/


(function() {
  var BinaryHeap;

  BinaryHeap = exports.BinaryHeap = function(scoreFunction) {
    /* @ignore
    */
    this.content = [];
    /* @ignore
    */

    this.scoreFunction = scoreFunction;
    return this;
  };

  /*
   * Add element to heap.
   * @param {Object} element
  */


  BinaryHeap.prototype.push = function(element) {
    this.content.push(element);
    this.sinkDown(this.content.length - 1);
  };

  /*
   * Return first element from heap.
   * @param {Object} element
   * @returns {Object} element
  */


  BinaryHeap.prototype.pop = function() {
    var end, result;
    result = this.content[0];
    end = this.content.pop();
    if (this.content.length > 0) {
      this.content[0] = end;
      this.bubbleUp(0);
    }
    return result;
  };

  /*
   * Remove the given element from the heap.
   * @param {Object} element
   * @throws {Error} if node not found
  */


  BinaryHeap.prototype.remove = function(node) {
    var isFound;
    isFound = this.content.some(function(cNode, idx) {
      var end;
      if (cNode === node) {
        end = this.content.pop();
        if (idx !== this.content.length) {
          this.content[idx] = end;
          if (this.scoreFunction(end) < this.scoreFunction(node)) {
            this.sinkDown(idx);
          } else {
            this.bubbleUp(idx);
          }
        }
        return true;
      }
      return false;
    }, this);
  };

  /* Number of elements in heap.
  */


  BinaryHeap.prototype.size = function() {
    return this.content.length;
  };

  /* @ignore
  */


  BinaryHeap.prototype.sinkDown = function(idx) {
    var element, parent, parentIdx;
    element = this.content[idx];
    while (idx > 0) {
      parentIdx = Math.floor((idx + 1) / 2) - 1;
      parent = this.content[parentIdx];
      if (this.scoreFunction(element) < this.scoreFunction(parent)) {
        this.content[parentIdx] = element;
        this.content[idx] = parent;
        idx = parentIdx;
      } else {
        break;
      }
    }
  };

  /* @ignore
  */


  BinaryHeap.prototype.bubbleUp = function(idx) {
    var child1, child1Idx, child1Score, child2, child2Idx, child2Score, elemScore, element, length, swapIdx;
    length = this.content.length;
    element = this.content[idx];
    elemScore = this.scoreFunction(element);
    while (true) {
      child2Idx = (idx + 1) * 2;
      child1Idx = child2Idx - 1;
      swapIdx = null;
      if (child1Idx < length) {
        child1 = this.content[child1Idx];
        child1Score = this.scoreFunction(child1);
        if (child1Score < elemScore) {
          swapIdx = child1Idx;
        }
      }
      if (child2Idx < length) {
        child2 = this.content[child2Idx];
        child2Score = this.scoreFunction(child2);
        if (child2Score < (swapIdx === null ? elemScore : child1Score)) {
          swapIdx = child2Idx;
        }
      }
      if (swapIdx !== null) {
        this.content[idx] = this.content[swapIdx];
        this.content[swapIdx] = element;
        idx = swapIdx;
      } else {
        break;
      }
    }
  };

}).call(this);
