// Generated by CoffeeScript 1.4.0

/*
 * @fileoverview
 *
 * Provides facilities for parsing an xml String.
 * 
 * You will typically get a `gamejs.xml.Document` instance
 * by loading the data with one of the two static 
 * `Document.fromString(string)` or `Document.fromUrl(url)`.

 * Querying for `elements(name)` or `children()` will return a
 * new `gamejs.xml.Document` matching your result (or null).
 *
 * Use `attributes(name)` and `value()` to get the data stored
 * in the XML Document.
*/


/*
 * XMLParser
*/


(function() {
  var Document, Parser;

  Parser = exports.Parser = function() {
    var parser, xmlDoc;
    xmlDoc = null;
    parser = new DOMParser();
    this.parseFromString = function(xmlString) {
      xmlDoc = parser.parseFromString(xmlString, 'text/xml');
      return xmlDoc;
    };
    return this;
  };

  /*
   * Instantiate with the static functions `Document.fromString()` and `fromURL()`.
  */


  Document = exports.Document = function(xmlDocument) {
    if (!xmlDocument || (!xmlDocument instanceof XMLDocument)) {
      throw new Error('Need a valid xmlDocument.');
    }
    /* @ignore *
    */

    this._xmlDocument = xmlDocument;
    return this;
  };

  /*
   * Returns the first element in the current document whose tag-name matches
   * the given 'name'.
   * @returns gamejs.xml.Document
  */


  Document.prototype.element = function(name) {
    var elem;
    elem = this._xmlDocument.getElementsByTagName(name)[0];
    return elem && new Document(elem) || null;
  };

  /*
   * Returns all elements in the current document whose tag-name matches
   * the given 'name'.
   * @returns an Array of gamejs.xml.Document
  */


  Document.prototype.elements = function(name) {
    var elems;
    elems = this._xmlDocument.getElementsByTagName(name);
    return Array.prototype.slice.apply(elems, [0]).map(function(elem) {
      return new Document(elem);
    });
  };

  /*
   * Returns the attribute value of this document.
   *
   * @returns String
  */


  Document.prototype.attribute = function(name) {
    var attributeFloatValue, attributeIntValue, attributeValue;
    attributeValue = this._xmlDocument.getAttribute(name);
    attributeValue = attributeValue ? attributeValue.trim() : null;
    if (attributeValue === null) {
      return null;
    }
    if (attributeValue.toLowerCase() === 'true') {
      return true;
    }
    if (attributeValue.toLowerCase() === 'false') {
      return false;
    }
    attributeIntValue = parseInt(attributeValue, 10);
    attributeFloatValue = parseFloat(attributeValue, 10);
    if (!isNaN(attributeIntValue)) {
      if (attributeFloatValue !== attributeIntValue) {
        return attributeFloatValue;
      }
      return attributeIntValue;
    }
    return attributeValue;
  };

  /*
   * Returns the nodevalue of the current xml document
   * @returns String
  */


  Document.prototype.value = function() {
    return this._xmlDocument.nodeValue;
  };

  /*
   * Returns all children of this xml document
   * @returns Array of gamejs.xml.Document
  */


  Document.prototype.children = function() {
    return Array.prototype.slice.apply(this._xmlDocument.childNodes, [0]).map(function(cNode) {
      return new Document(cNode);
    });
  };

  /*
   * @returns gamejs.xml.Document
  */


  Document.fromString = function(xmlString) {
    var parser, xmlDoc;
    parser = new DOMParser();
    xmlDoc = parser.parseFromString(xmlString, 'text/xml');
    return new Document(xmlDoc);
  };

  /*
   * @returns gamejs.xml.Document
  */


  Document.fromURL = function(url) {
    var response;
    response = new XMLHttpRequest();
    response.open('GET', url, false);
    response.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    response.setRequestHeader('Content-Type', 'text/xml');
    response.overrideMimeType('text/xml');
    response.send();
    return new Document(response.responseXML);
  };

}).call(this);
